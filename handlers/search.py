# handlers/search.py (—Å –æ—Ç–ª–∞–¥–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä)

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from filters.callback_data import FilterCallback
from states.search_states import SearchStates
from database.db import find_apartments
from keyboards.search_filters import get_filters_keyboard

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
async def cmd_search(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.choosing_filters)
    await state.update_data(filters={})
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã:", reply_markup=get_filters_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@router.callback_query(FilterCallback.filter())
async def process_filter(callback: types.CallbackQuery, callback_data: FilterCallback, state: FSMContext):
    data = await state.get_data()
    filters = data.get("filters", {})

    if callback_data.category == "district":
        filters["district"] = callback_data.value
        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω: {callback_data.value}")

    elif callback_data.category == "price":
        filters["price"] = callback_data.value
        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–Ω—É: {callback_data.value}")

    elif callback_data.category == "rooms":
        filters["rooms"] = callback_data.value
        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–Ω–∞—Ç: {callback_data.value}")

    elif callback_data.category == "action" and callback_data.value == "show":
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", filters)
        await show_apartments(callback, filters)
        await state.clear()
        return

    await state.update_data(filters=filters)

# –ü–æ–∫–∞–∑ –∫–≤–∞—Ä—Ç–∏—Ä (–≤–∫–ª—é—á–∞—è –ª–æ–≥ –∏ –∑–∞—â–∏—Ç—É)
async def show_apartments(callback: types.CallbackQuery, filters: dict):
    try:
        apartments = find_apartments(filters)
        print(f"üîç show_apartments: –Ω–∞–π–¥–µ–Ω–æ {len(apartments)} –∫–≤–∞—Ä—Ç–∏—Ä")

        if not apartments:
            await callback.message.answer("‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for apt in apartments:
            text = (
                f"üè° <b>{apt['title']}</b>\n"
                f"{apt['description']}\n\n"
                f"üíµ <b>{apt['price']}</b> —Ä—É–±/—Å—É—Ç–∫–∏\n"
                f"üìç –†–∞–π–æ–Ω: {apt['district']}\n"
                f"üö™ –ö–æ–º–Ω–∞—Ç: {apt['rooms']}"
            )
            try:
                await callback.message.answer_photo(photo=apt['photo'], caption=text, parse_mode="HTML")
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:", e)
                await callback.message.answer(text, parse_mode="HTML")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ show_apartments:", e)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
