# handlers/search.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from keyboards.search_filters import get_filters_keyboard, FilterCallback
from states.search_states import SearchStates
from database.db import find_apartments
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
async def start_search(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.choosing_filters)
    await state.update_data(filters={})
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
        reply_markup=get_filters_keyboard()
    )

@router.callback_query(FilterCallback.filter())
async def process_filter(callback: types.CallbackQuery, callback_data: FilterCallback, state: FSMContext):
    data = await state.get_data()
    filters = data.get("filters", {})

    if callback_data.category in ["district", "price", "rooms"]:
        filters[callback_data.category] = callback_data.value
        await state.update_data(filters=filters)
        await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {callback_data.value}")

    elif callback_data.category == "action":
        if callback_data.value == "show":
            await show_apartments(callback, filters)
            await state.clear()
        elif callback_data.value == "reset":
            await state.update_data(filters={})
            await callback.message.edit_text(
                "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
                reply_markup=get_filters_keyboard()
            )
            await callback.answer()

async def show_apartments(callback: types.CallbackQuery, filters: dict):
    apartments = find_apartments(filters)

    if not apartments:
        await callback.message.edit_text(
            "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã:",
            reply_markup=get_filters_keyboard()
        )
        return

    for apt in apartments:
        text = (
            f"üè† <b>{apt['title']}</b>\n"
            f"üìç –†–∞–π–æ–Ω: {apt['district']}\n"
            f"üíµ –¶–µ–Ω–∞: {apt['price']} ‚ÇΩ\n"
            f"üõè –ö–æ–º–Ω–∞—Ç: {apt['rooms']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {apt['description']}"
        )

        apartment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üóìÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"book_{apt['id']}"
                ),
                InlineKeyboardButton(
                    text="üìû –°–≤—è–∑–∞—Ç—å—Å—è",
                    callback_data=f"contact_{apt['id']}"
                )
            ]
        ])

        if apt.get('photo'):
            try:
                await callback.message.answer_photo(
                    photo=apt['photo'],
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=apartment_keyboard
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await callback.message.answer(
                    text,
                    parse_mode="HTML",
                    reply_markup=apartment_keyboard
                )
        else:
            await callback.message.answer(
                text,
                parse_mode="HTML",
                reply_markup=apartment_keyboard
            )

    await callback.answer()

@router.callback_query(F.data.startswith("book_"))
async def book_apartment(callback: types.CallbackQuery):
    apartment_id = callback.data.replace("book_", "")
    await callback.answer()
    await callback.message.answer(f"üóìÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É ‚Ññ{apartment_id}. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!")

@router.callback_query(F.data.startswith("contact_"))
async def contact_apartment(callback: types.CallbackQuery):
    apartment_id = callback.data.replace("contact_", "")
    await callback.answer()
    await callback.message.answer(f"üìû –°–≤—è–∑–∞—Ç—å—Å—è –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ‚Ññ{apartment_id}:\n\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 999 999 99 99\nTelegram: @manager_contact")
