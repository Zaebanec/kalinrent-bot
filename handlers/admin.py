# handlers/admin.py (FSM: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters.state import State, StatesGroup
from database.db import add_apartment
import os

# OWNER_ID —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
raw_id = os.getenv("OWNER_ID")
if not raw_id:
    print("‚ö†Ô∏è OWNER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å t.env")
    raw_id = "0"
OWNER_ID = int(raw_id)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
class AddApartment(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_district = State()
    waiting_for_rooms = State()
    waiting_for_photo = State()

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
@router.message(Command("admin"), F.from_user.id == OWNER_ID)
async def admin_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data="add_apartment")]
    ])
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

@router.callback_query(F.data == "add_apartment")
async def start_add_apartment(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddApartment.waiting_for_title)
    await callback.message.answer("üè° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await callback.answer()

@router.message(AddApartment.waiting_for_title)
async def add_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddApartment.waiting_for_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")

@router.message(AddApartment.waiting_for_description)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddApartment.waiting_for_price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")

@router.message(AddApartment.waiting_for_price)
async def add_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
    await state.update_data(price=int(message.text))
    await state.set_state(AddApartment.waiting_for_district)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data="district_–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")],
        [InlineKeyboardButton(text="–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π", callback_data="district_–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data="district_–ú–æ—Å–∫–æ–≤—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ", callback_data="district_–î—Ä—É–≥–∏–µ")],
    ])
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("district_"))
async def add_district(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.replace("district_", "")
    await state.update_data(district=district)
    await state.set_state(AddApartment.waiting_for_rooms)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –∫–æ–º–Ω.", callback_data="rooms_1")],
        [InlineKeyboardButton(text="2 –∫–æ–º–Ω.", callback_data="rooms_2")],
        [InlineKeyboardButton(text="3+ –∫–æ–º–Ω.", callback_data="rooms_3")],
    ])
    await callback.message.answer("üö™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("rooms_"))
async def add_rooms(callback: types.CallbackQuery, state: FSMContext):
    rooms = callback.data.replace("rooms_", "")
    await state.update_data(rooms=int(rooms) if rooms != "3" else 3)
    await state.set_state(AddApartment.waiting_for_photo)
    await callback.message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):")
    await callback.answer()

@router.message(AddApartment.waiting_for_photo, F.photo)
async def add_photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    data["photo"] = photo_file_id

    add_apartment(data)
    await message.answer("‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(AddApartment.waiting_for_photo)
async def photo_required(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
