# handlers/admin.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import State, StatesGroup
from database.db import add_apartment, get_all_apartments, delete_apartment
import os
import subprocess

raw_id = os.getenv("OWNER_ID")
if not raw_id:
    print("‚ö†Ô∏è OWNER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å t.env")
    raw_id = "0"
OWNER_ID = int(raw_id)

router = Router()

class AddApartment(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_district = State()
    waiting_for_rooms = State()
    waiting_for_photo = State()

# /admin –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
@router.message(Command("admin"), F.from_user.id == OWNER_ID)
async def admin_menu(message: types.Message):
    print("‚úÖ admin_menu —Å—Ä–∞–±–æ—Ç–∞–ª")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data="add_apartment")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data="delete_apartment")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="update_bot")]
    ])
    await message.answer("üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
@router.callback_query(F.data == "update_bot")
async def update_bot(callback: types.CallbackQuery):
    result = subprocess.run(["python3", "git_push.py"], capture_output=True, text=True)
    if result.returncode == 0:
        await callback.message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ë–æ—Ç —Å–∫–æ—Ä–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è.")
    elif result.returncode == 2:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø—É—à–∞. –ë–æ—Ç –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ—Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.")
    await callback.answer()

# FSM: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@router.callback_query(F.data == "add_apartment")
async def start_add_apartment(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddApartment.waiting_for_title)
    await callback.message.answer("üè° –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await callback.answer()

@router.message(AddApartment.waiting_for_title)
async def add_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddApartment.waiting_for_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")

@router.message(AddApartment.waiting_for_description)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddApartment.waiting_for_price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")

@router.message(AddApartment.waiting_for_price)
async def add_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
    await state.update_data(price=int(message.text))
    await state.set_state(AddApartment.waiting_for_district)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data="district_–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")],
        [InlineKeyboardButton(text="–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π", callback_data="district_–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", callback_data="district_–ú–æ—Å–∫–æ–≤—Å–∫–∏–π")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ", callback_data="district_–î—Ä—É–≥–∏–µ")],
    ])
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("district_"))
async def add_district(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.replace("district_", "")
    await state.update_data(district=district)
    await state.set_state(AddApartment.waiting_for_rooms)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –∫–æ–º–Ω.", callback_data="rooms_1")],
        [InlineKeyboardButton(text="2 –∫–æ–º–Ω.", callback_data="rooms_2")],
        [InlineKeyboardButton(text="3+ –∫–æ–º–Ω.", callback_data="rooms_3")],
    ])
    await callback.message.answer("üö™ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("rooms_"))
async def add_rooms(callback: types.CallbackQuery, state: FSMContext):
    rooms = callback.data.replace("rooms_", "")
    await state.update_data(rooms=int(rooms) if rooms != "3" else 3)
    await state.set_state(AddApartment.waiting_for_photo)
    await callback.message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –û–î–ù–û —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):")
    await callback.answer()

@router.message(AddApartment.waiting_for_photo, F.photo)
async def add_photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    data["photo"] = photo_file_id

    add_apartment(data)
    await message.answer("‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(AddApartment.waiting_for_photo)
async def photo_required(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã.")

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@router.callback_query(F.data == "delete_apartment")
async def choose_apartment_to_delete(callback: types.CallbackQuery):
    apartments = get_all_apartments()
    if not apartments:
        await callback.message.answer("‚ö†Ô∏è –ö–≤–∞—Ä—Ç–∏—Ä –Ω–µ—Ç –≤ –±–∞–∑–µ.")
        return

    keyboard = []
    for apt in apartments:
        button = InlineKeyboardButton(
            text=f"‚ùå {apt['title']} (ID {apt['id']})",
            callback_data=f"confirm_delete_{apt['id']}"
        )
        keyboard.append([button])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                  reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete(callback: types.CallbackQuery):
    apt_id = int(callback.data.replace("confirm_delete_", ""))
    delete_apartment(apt_id)
    await callback.message.answer(f"‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å ID {apt_id} —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()
